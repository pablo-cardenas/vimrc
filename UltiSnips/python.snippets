snippet #! "#!/usr/bin/env python" b
#!/usr/bin/env python
$0
endsnippet

snippet ifmain "ifmain" b
if __name__ == "__main__":
	${1:${VISUAL:main()}}
endsnippet

snippet with "with" b
with ${1:expr}`!p snip.rv = " as " if t[2] else ""`${2:var}:
	${3:${VISUAL:pass}}
$0
endsnippet

snippet for "for loop" b
for ${1:item} in ${2:iterable}:
	${3:${VISUAL:pass}}
$0
endsnippet

# --------------------------------------------- #

snippet sized "Sized" b
def __len__(self):
	${2:pass}
endsnippet


snippet sequence "Sequence" b
def __getitem__(self, index):
	${1:pass}

def __len__(self):
	${2:pass}
endsnippet


snippet contextmanager "AbstractContextManager" b
def __enter__(self):
	${1:pass}

def __exit__(self, exc_type, exc_value, traceback):
	${2:pass}
endsnippet


snippet descriptor "Descriptor" b
def __get__(self, instance, owner):
	${1:pass}

def __set__(self, instance, value):
	${2:pass}

def __delete__(self, instance):
	${3:pass}
endsnippet


snippet repr "__repr__" b
def __repr__(self):
	${1:pass}
endsnippet

# --------------------------------------------- #

global !p

class Arg:
	def __init__(self, arg):
		self.arg = arg
		name_and_type = arg.split('=')[0].split(':')
		self.name = name_and_type[0].strip()
		self.type = name_and_type[1].strip() if len(name_and_type) == 2 else None

def get_args(arglist):
	args = []
	n = len(arglist)
	i = 0
	while i < n:
		l_bracket = 0
		start = i
		while i < n and (l_bracket > 0 or arglist[i] != ','):
			if arglist[i] == '[':
				l_bracket += 1
			elif arglist[i] == ']' and l_bracket > 0:
				l_bracket -= 1
			i += 1
		arg = arglist[start:i]
		if arg:
			args.append(Arg(arg))
		i += 1

	args = [arg for arg in args if arg.name != 'self']

	return args
endglobal


snippet def "function with docstrings" b
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'self' + (", " if len(t[2]) else "")`${2:arg1: Type1}) -> ${3:None}:`!p
snip.rv = ""
if t[4]:
	snip >> 1
	snip += '"""'
	snip += ""
`${4:TODO: Docstring for $1.}`!p
snip.rv = ""
if t[4]:
	snip >> 1

	args = get_args(t[2])
	for arg in args:
		snip += ":param {}: TODO".format(arg.name)

	if t[3] != "None":
		snip += ":returns: TODO"

	snip += '"""'
`
	${5:${VISUAL:pass}}
endsnippet


snippet defc "class method with docstrings" b
@classmethod
def ${1:function}(`!p
if snip.indent:
	snip.rv = 'cls' + (", " if len(t[2]) else "")`${2:arg1}) -> ${3:None}:
	"""${4:TODO: Docstring for $1.}`!p

snip.rv = ""
snip >> 1

args = get_args(t[2])
for arg in args:
	snip += ":param {}: TODO".format(arg.name)

if t[3] != "None":
	snip += ":returns: TODO"
`
	"""
	${5:${VISUAL:pass}}
endsnippet


snippet defs "static method with docstrings" b
@staticmethod
def ${1:function}(${2:arg1}) -> ${3:None}:
	"""${4:TODO: Docstring for $1.}`!p
snip.rv = ""
snip >> 1

args = get_args(t[2])
for arg in args:
	snip += ":param {}: TODO".format(arg.name)

if t[3] != "None":
	snip += ":returns: TODO"
`
	"""

	${5:${VISUAL:pass}}
endsnippet


snippet class "class with docstrings" b
class ${1:MyClass}`!p snip.rv = "(" if t[2] else ""`${2:Parent}`!p snip.rv = ")" if t[2] else ""`:
	"""${3:Docstring for $1.}`!p
snip.rv = ""
snip >> 1
args = get_args(t[4])
if args:
	snip.rv += "\n" + snip.mkline("")
for arg in args:
	snip += ":param {}: TODO".format(arg.name)
`
	"""
	def __init__(self`!p snip.rv = ", " if t[4] else ""`${4:arg1: Type1}) -> None:`!p
snip >> 2
snip.rv = ""
if t[2]:
	# If has parent class
	snip += "super().__init__()"

if args and t[2]:
	snip.rv += '\n' + snip.mkline("")

for arg in args:
	# Initialize attributes
	snip += "self._{} = {}".format(arg.name, arg.name)
`

		$5
endsnippet


snippet dcl "dataclass" b
@dataclass`!p snip.rv = "(" if t[1] or t[2] else ""`${1/(.+)/(?1:frozen=)/}${1:True}`!p snip.rv = ', ' if t[1] and t[2] else ""`${2/(.+)/(?1:order=)/}${2:True}`!p snip.rv = ")" if t[1] or t[2] else ""`
class ${3:MyClass}:
	"""${4:Docstring for $3.}
	"""
	var_1: int
	var_2: float
	var_3: str
endsnippet

snippet namedtuple "namedtuple" b
${1:MyNamedTuple} = namedtuple("$1", (${2:"attr1", "attr2"}))
$0

endsnippet

# --------------------------------------------- #

snippet np "import numpy as np" b
import numpy as np
from numpy.random import default_rng
$0
endsnippet

snippet plt "import matplotlib.pyplot as plt" b
import matplotlib.pyplot as plt
$0
endsnippet

snippet torch "import torch" b
import torch
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
$0
endsnippet

# --------------------------------------------- #

snippet device "device = torch.device('cuda' if not torch.cuda.is_available() else 'cpu')" b
device = torch.device("cuda" if not torch.cuda.is_available() else "cpu")
endsnippet

snippet no_grad "with torch.no_grad()" b
with torch.no_grad():
	${0:${VISUAL:pass}}
endsnippet

snippet loss "zero_grad, backward, step" b
loss = criterion(${3:input}, ${4:target})
optimizer.zero_grad()
loss.backward()
# nn.utils.clip_grad_norm_(${1:model}.parameters(), max_norm=${2:1})
# nn.utils.clip_grad_value_($1.parameters(), clip_value=$2)
optimizer.step()
$0
endsnippet

snippet gym "gym loop" b
from itertools import count

import gymnasium as gym


env = gym.make("${1:CartPole-v1}"`!p
snip.rv = ', render_mode="' if t[2] else ""
`${2:human}`!p
snip.rv = '"' if t[2] else ""
`)

for episode in count():
	observation, info = env.reset(`!p snip.rv = "seed=" if t[3] else ""`${3:42})

	for t in count():
		# Select an action
		action = env.action_space.sample()

		# Perform action in the enviroment
		next_observation, reward, terminated, truncated, info = env.step(
			action
		)

		$0

		if terminated or truncated:
			break
		observation = next_observation

	print(f"{episode=}, {t+1=}")

env.close()
endsnippet

# --------------------------------------------- #

snippet if "If" b
if ${1:condition}:
	${2:${VISUAL:pass}}
endsnippet

snippet ife "If / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
else:
	${3:pass}
endsnippet

snippet ifee "If / Elif / Else" b
if ${1:condition}:
	${2:${VISUAL:pass}}
elif ${3:condition}:
	${4:pass}
else:
	${5:pass}
endsnippet

snippet pygame "pygame template" b
import pygame

pygame.init()
width, height = 640, 360
screen = pygame.display.set_mode((width, height))

pygame.font.init()
font = pygame.font.Font(None, 20)

clock = pygame.time.Clock()
running = True
dt = 0

player_pos = pygame.Vector2(width / 2, height / 2)

while running:
	for event in pygame.event.get():
		if event.type == pygame.QUIT:
			running = False


	keys = pygame.key.get_pressed()
	if keys[pygame.K_k]:
		player_pos.y -= 300 * dt
	if keys[pygame.K_j]:
		player_pos.y += 300 * dt
	if keys[pygame.K_h]:
		player_pos.x -= 300 * dt
	if keys[pygame.K_l]:
		player_pos.x += 300 * dt

	screen.fill("purple")
	pygame.draw.circle(screen, "red", player_pos, 40)
	text = font.render("Hello world", True, "white")
	screen.blit(text, player_pos)
	pygame.display.flip()

	dt = clock.tick(60) / 1000

pygame.quit()
endsnippet


snippet clickio "Click command for input/output" b
@click.command()
@click.argument("input", type=click.File("r"), default="-")
@click.argument("output", type=click.File("w"), default="-")
def main(input, output):
	${0:${VISUAL:pass}}
endsnippet


snippet initpkg "Init file for package" b
"""${1:project_name}

${2:project_description}
"""

__version__ = "${3:0.1}"
endsnippet

snippet ppe "ProcessPoolExecutor" b
with concurrent.futures.ProcessPoolExecutor(max_workers=${1:4}) as executor:
	${0:emap or cfac}
endsnippet

snippet tpe "ThreadPoolExecutor" b
with concurrent.futures.ThreadPoolExecutor(max_workers=${1:4}) as executor:
	${0:emap or cfac}
endsnippet


snippet emap "executor.map" b
${1:results} = executor.map(${2:func}, ${3:iterable})
$0
endsnippet


snippet cfac "concurrent.futures.as_completed" b
futures = (executor.submit(${1:func}, ${2:args}) for $2 in ${3:iterable})

for future in concurrent.futures.as_completed(futures):
	result = future.result()
	$0
endsnippet


snippet perf_counter "time.perf_counter()" b
start_time = time.perf_counter()
print("Start: ${1:name}"}

${1:${VISUAL:pass}}

end_time = time.perf_counter()
print(f"End: $1 ({end_time - start_time:.2f}s)")
$0
endsnippet


snippet iterrows "pandas iterrows bucle" b
for i_$1, row_$1 in $2.iterrows():
	${3:${VISUAL:pass}}
$0
endsnippet


snippet tempdir "tempfile.TemporaryDirectory()" b
with tempfile.TemporaryDirectory() as ${1:tmpdirname}:
	${2:${VISUAL:pass}}
endsnippet


snippet zipfile "zipfile.ZipFile" b
with zipfile.ZipFile(${1:zip_path},"r") as zip_ref:
	zip_ref.extract(member, target_dir)
	zip_ref.extractall(target_dir)
	$0
endsnippet


snippet pyside "pyside" b
import sys
from PySide6.QtWidgets import QApplication


app = QApplication(sys.argv)

${0:${VISUAL:# ...}}

sys.exit(app.exec())
endsnippet
