global !p
def math():
	return vim.eval('vimtex#syntax#in_mathzone()') == '1'
def comment(): 
	return vim.eval('vimtex#syntax#in_comment()') == '1'
def env(name):
	x, y = vim.eval("vimtex#env#is_inside('" + name + "')") 
	return x != '0' and y != '0'
endglobal


snippet template "Basic template" b
\documentclass[a4paper]{article}

\usepackage[T1]{fontenc}
\usepackage{lmodern}
\usepackage{amsmath, amssymb}

\begin{document}
$0
\end{document}
endsnippet

snippet beg "begin{} / end{}" bA
\\begin{$1}
$0
\\end{$1}
endsnippet

snippet ... "dots" iA
\dots
endsnippet

snippet table "Table environment" b
\begin{table}[${1:htpb}]
	\centering
	\caption{${2:caption}}
	\label{tab:${3:label}}
	\begin{tabular}{${5:c}}
	$0${5/((?<=.)c|l|r)|./(?1: & )/g}
	\end{tabular}
\end{table}
endsnippet

snippet fig "Figure environment" b
\begin{figure}[${1:htpb}]
	\centering
	${2:\includegraphics[width=0.8\textwidth]{$3}}
	\caption{${4:$3}}
	\label{fig:${5:${3/\W+/-/g}}}
\end{figure}
endsnippet

snippet enum "Enumerate" bA
\begin{enumerate}
	\item $0
\end{enumerate}
endsnippet

snippet item "Itemize" bA
\begin{itemize}
	\item $0
\end{itemize}
endsnippet

snippet desc "Description" b
\begin{description}
	\item[$1] $0
\end{description}
endsnippet

snippet pac "Package" b
\usepackage${1/(.+)/(?1:[)/}${1:option}${1/(.+)/(?1:])/}{${2:package}}$0
endsnippet

snippet => "implies" Ai
\implies $0
endsnippet

snippet =< "implied by" Ai
\impliedby $0
endsnippet

context "math()"
snippet iff "iff" Ai
\iff $0
endsnippet

context "math()"
snippet thr4 "\therefore" wiA
\therefore $0
endsnippet

context "not math()"
snippet mk "Math" wA
\($1\)$0
endsnippet

snippet dm "Math" wA
\[
	${1:${VISUAL}}
.\]
$0
endsnippet


snippet ali "Align" bA
\begin{align*}
	$0
.\end{align*}
endsnippet


context "math()"
snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet / "Fraction" i
\\frac{${VISUAL}}{$1}$0
endsnippet

context "math()"
snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "symbol frac" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

context "math()"
snippet '^.*\)/' "() frac" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i-=1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet



context "math()"
snippet && "align" iA
&${1:${VISUAL}} \\\\
endsnippet

context "math()"
snippet != "not equals" iA
\neq 
endsnippet

context "math()"
snippet ceil "ceil" iA
\left\lceil $1 \right\rceil $0
endsnippet

context "math()"
snippet floor "floor" iA
\left\lfloor $1 \right\rfloor$0
endsnippet

snippet pmat "pmat" iA
\begin{pmatrix} $1 \end{pmatrix} $0
endsnippet

snippet bmat "bmat" iA
\begin{bmatrix} $1 \end{bmatrix} $0
endsnippet

# --------------------------------------------- #
context "math()"
snippet () "left( right)" iA
(${1:${VISUAL}})$0
endsnippet

context "math()"
snippet [] "left[ right]" iA
[${1:${VISUAL}}]$0
endsnippet

context "math()"
snippet {} "left\{ right\}" iA
\\{${1:${VISUAL}}\\}$0
endsnippet

context "math()"
snippet vv "left| right|" iA
\lvert ${1:${VISUAL}} \rvert $0
endsnippet

context "math()"
snippet VV "left| right|" iA
\lVert ${1:${VISUAL}} \rVert $0
endsnippet

# --------------------------------------------- #

context "math()"
snippet lim "limit" w
\lim_{${1:n \to \infty}}{${2:${VISUAL}}}
endsnippet

context "math()"
snippet limsup "superior limit" w
\limsup_{${1:n \to \infty}}{${2:${VISUAL}}}
endsnippet

context "math()"
snippet liminf "inferior limit" w
\liminf_{${1:n \to \infty}}{${2:${VISUAL}}}
endsnippet

context "math()"
snippet uuu "bigcup" w
\bigcup${1/(.+)/(?1:_{)/}${1:n = 1}${1/(.+)/(?1:})/}${2/(.+)/(?1:^{)/}${2:\infty}${2/(.+)/(?1:})/}{${3:${VISUAL}}}$0
endsnippet

context "math()"
snippet nnn "bigcap" w
\bigcap${1/(.+)/(?1:_{)/}${1:n = 1}${1/(.+)/(?1:})/}${2/(.+)/(?1:^{)/}${2:\infty}${2/(.+)/(?1:})/}{${3:${VISUAL}}}$0
endsnippet

context "math()"
snippet uu+ "biguplus" w
\biguplus${1/(.+)/(?1:_{)/}${1:n = 1}${1/(.+)/(?1:})/}${2/(.+)/(?1:^{)/}${2:\infty}${2/(.+)/(?1:})/}{${3:${VISUAL}}}$0
endsnippet

context "math()"
snippet sum "sum" w
\sum${1/(.+)/(?1:_{)/}${1:n = 1}${1/(.+)/(?1:})/}${2/(.+)/(?1:^{)/}${2:\infty}${2/(.+)/(?1:})/}{${3:${VISUAL}}}$0
endsnippet

context "math()"
snippet prod "product" w
\prod${1/(.+)/(?1:_{)/}${1:n = 1}${1/(.+)/(?1:})/}${2/(.+)/(?1:^{)/}${2:\infty}${2/(.+)/(?1:})/}{${3:${VISUAL}}}$0
endsnippet

context "math()"
snippet int "real integral" w
\int${1/(.+)/(?1:_{)/}${1:-\infty}${1/(.+)/(?1:})/}${2/(.+)/(?1:^{)/}${2:+\infty}${2/(.+)/(?1:})/}{${3:${VISUAL}}}\:d${4:x}$0
endsnippet

context "math()"
snippet mint "measure integral" w
\int${1/(.+)/(?1:_{)/}${1:X}${1/(.+)/(?1:})/}{${2:${VISUAL:f}}}\,\mathrm{d}${3:\mu}$0
endsnippet

context "math()"
snippet mintu "upper measure integral" w
\overline{\int${1/(.+)/(?1:_{)/}${1:X}${1/(.+)/(?1:})/}}{${3:${VISUAL:f}}}\,\mathrm{d}${4:\mu}$0
endsnippet

context "math()"
snippet mintl "lower measure integral" w
\underline{\int${1/(.+)/(?1:_{)/}${1:X}${1/(.+)/(?1:})/}}{${3:${VISUAL:f}}}\,\mathrm{d}${4:\mu}$0
endsnippet

context "math()"
snippet seq "Sequence" w
\\{${1:x_n}\\}${2/(.+)/(?1:_{)/}${2:n = 1}${2/(.+)/(?1:})/}${3/(.+)/(?1:^{)/}${3:\infty}${3/(.+)/(?1:})/}${4/(.+)/(?1: \\\\subset )/}${4:\R}$0
endsnippet

context "not math()"
snippet seq "Sequence" w
\\(\\{${1:x_n}\\}${2/(.+)/(?1:_{)/}${2:n = 1}${2/(.+)/(?1:})/}${3/(.+)/(?1:^{)/}${3:\infty}${3/(.+)/(?1:})/}${4/(.+)/(?1: \\\\subset )/}${4:\R}\\)$0
endsnippet

# --------------------------------------------- #

context "math()"
snippet ubb "The \underbrace command" w
\underbrace{${1:${VISUAL:}}}_{$2} $0
endsnippet

context "math()"
snippet obb "The \overbrace command" w
\overbrace{${1:${VISUAL:}}}^{$2} $0
endsnippet

context "math()"
snippet op "\operatorname" w
\operatorname{$1}$0
endsnippet

context "math()"
snippet part "d/dx" wA
\frac{\partial ${1:V}}{\partial ${2:x}} $0
endsnippet

context "math()"
snippet sq "\sqrt{}" iA
\sqrt{${1:${VISUAL}}} $0
endsnippet

context "math()"
snippet ^^ "to the ... power" iA
^{$1}$0
endsnippet

snippet __ "subscript" iA
_{$1}$0
endsnippet

snippet ooo "\infty" iA
\infty$0
endsnippet

snippet <= "leq" iA
\le $0
endsnippet

snippet >= "geq" iA
\ge $0
endsnippet

context "math()"
snippet EE "geq" iA
\exists 
endsnippet

context "math()"
snippet ~~ "sim" iA
\sim 
endsnippet

context "math()"
snippet AA "forall" iA
\forall 
endsnippet


snippet plot "Plot" w
\begin{figure}[$1]
	\centering
	\begin{tikzpicture}
		\begin{axis}[
			xmin= ${2:-10}, xmax= ${3:10},
			ymin= ${4:-10}, ymax = ${5:10},
			axis lines = middle,
		]
			\addplot[domain=$2:$3, samples=${6:100}]{$7};
		\end{axis}
	\end{tikzpicture}
	\caption{$8}
	\label{${9:$8}}
\end{figure}
endsnippet

snippet nn "Tikz node" w
\node[$5] (${1/[^0-9a-zA-Z]//g}${2}) ${3:at (${4:0,0}) }{$${1}$};
$0
endsnippet

context "math()"
snippet nabl "nabla" iA
\nabla 
endsnippet

context "math()"
snippet xx "cross" iA
\times 
endsnippet

context "math()"
snippet ** "cdot" iA
\cdot 
endsnippet

context "math()"
snippet -> "to" iA
\to 
endsnippet

context "math()"
snippet uto "to" iA
\mathop{\uparrow}
endsnippet

context "math()"
snippet dto "to" iA
\mathop{\downarrow}
endsnippet

context "math()"
snippet <-> "leftrightarrow" iA
\leftrightarrow
endsnippet

context "math()"
snippet !> "mapsto" iA
\mapsto 
endsnippet

context "math()"
snippet \\\ "setminus" iA
\setminus $0
endsnippet

context "math()"
snippet || "mid" iA
\mid $0
endsnippet

context "math()"
snippet cc "subset" Ai
\subset $0
endsnippet

context "math()"
snippet notin "not in " iA
\not\in $0
endsnippet

context "math()"
snippet inn "in" iA
\in $0
endsnippet

context "math()"
snippet NN "cap" iA
\cap $0
endsnippet

context "math()"
snippet UU "cup" iA
\cup $0
endsnippet

context "math()"
snippet U+ "uplus" iA
\uplus $0
endsnippet

context "math()"
snippet OO "emptyset" iA
\emptyset
endsnippet

# --------------------------------------------- #

context "math()"
snippet "([A-Z])cal" "\mathcal" rA
\mathcal{`!p snip.rv = match.group(1)`}$0
endsnippet

context "math()"
snippet "([A-Z])bb" "\mathbb" rA
\mathbb{`!p snip.rv = match.group(1)`}$0
endsnippet

# --------------------------------------------- #

context "math()"
snippet tt "text" iA
\text{$1}$0
endsnippet

context "math()"
snippet case "cases" wA
\begin{cases}
	$1 & $2
\end{cases}
endsnippet

snippet bigfun "Big function" iA
\begin{align*}
	$1: $2 &\longrightarrow $3 \\\\
	$4 &\longmapsto $1($4) = $0
.\end{align*}
endsnippet

# --------------------------------------------- #

context "math()"
snippet fun "f: A -> B" w
${1:f}\colon ${2:U} \to ${3:\R}
endsnippet

context "not math()"
snippet fun "f: A -> B" w
$${1:f}\colon ${2:U} \to ${3:\R}$
endsnippet

# --------------------------------------------- #

snippet newt "\newtheorem" b
\newtheorem{${1:theorem}}{${2:`!p snip.rv = t[1].title()`}}
endsnippet

snippet thmsty "\theoremstyle" b
\theoremstyle{$1`!p snip.rv = complete(t[1], ['plain', 'definition', 'remark'])`}$0
endsnippet


# --------------------------------------------- #

snippet h1 "section" bA
\section{${1:${VISUAL:}}}
$0
endsnippet

snippet h2 "subsection" bA
\subsection{${1:${VISUAL:}}}
$0
endsnippet

snippet h3 "subsubsection" bA
\subsubsection{${1:${VISUAL:}}}
$0
endsnippet

# --------------------------------------------- #

priority 1
snippet def "begin{definition}" b
\begin{definition}[${1}]
	$2 `!p snip.rv = " ".join(f'\\emph{{{s.strip().lower()}}}' for s in t[1].split(','))` $0
\end{definition}
endsnippet


context "math()"
snippet ## "#" iA
\#(${1:${VISUAL}})$0
endsnippet

# --------------------------------------------- #

context "math()"
snippet inv "inverse" iA
^{-1}
endsnippet

context "math()"
snippet compl "complement" iA
^{c}
endsnippet

context "math()"
snippet '\\Rb' "\bar{\R}" wrA
\overline{\R}
endsnippet

# --------------------------------------------- #

priority -100
context "math()"
snippet '([A-Za-z]|\\math[^{]*{[A-Za-z]})(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

context "math()"
snippet "([^\\\w][A-Za-ex-z])([ijknm])" "fast subscript" rA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

context "math()"
snippet "([^\\\w][A-Za-ex-z])_([ijknm][+-])" "fast subscript" rA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`$1}$0
endsnippet

# --------------------------------------------- #

snippet :: "\colon" iA
\colon $0
endsnippet


context "math()"
snippet and "static snippet: quad-spaced 'and' in equation" A
\quad \text{and} \quad $0
endsnippet

context "math()"
snippet or "static snippet: quad-spaced 'or' in equation" A
\quad \text{or} \quad $0
endsnippet

# --------------------------------------------- #

context "not math()"
snippet sss "sí y solo sí" A
si y solo si $0
endsnippet

context "not math()"
snippet ee "En efecto," A
En efecto, $0
endsnippet

context "not math()"
snippet plt "Por lo tanto," A
Por lo tanto, $0
endsnippet

context "not math()"
snippet alg "algebra"
álgebra$0
endsnippet

context "not math()"
snippet salg "σ-álgebra"
$\sigma$-álgebra$0
endsnippet

context "not math()"
snippet psis "π-sistema"
$\pi$-sistema$0
endsnippet

context "not math()"
snippet lsis "λ-sistema"
$\lambda$-sistema$0
endsnippet

context "not math()"
snippet mctp "μ-ctp" w
$\mu$-ctp$0
endsnippet

context "not math()"
snippet contra "(=><=)"
($\Rightarrow\!\Leftarrow$)
endsnippet
